

the night lasts for 8 * 60 minutes


let x be the total output capacity for all stations, kW per minute
let n be the number of stations.
let m be the number of destinations for each of the stations. 
let a be an integer array, where the ith value is the capacity of the ith car.

let d_{i, j} be an integer which describes the minimum charge to complete the jth trip for the ith station.
let p_{i, j} be the chance that d_{i, j} is sampled for the ith station.



Score Function:

let \phi be the penalty

let remainCharge_i be the charge for the ith car at the start of the night.
initally remainCharge_i = a_i / 2

for 100 days:
	query s from the program.
	let charge_{i, j} be the charge the ith car has at the jth minute.

	for the ith station:
		charge_{i, 0} = remainCharge_i
		for the jth minute:
			charge_{i, j + 1} = charge_{i, j} + s_{i, j}


	for the ith station,
		let trip be an index sampled based on the distribution p_i
		let t be the number of minutes where the car does not have enough charge for the ith trip.
		more formally, \min_{t = 0}^{8 * 60} (where charge_{i, t} >= d_{i, trip}) 
		\phi += t

		remainCharge_i = max(charge_{i, j} - d_{i, trip}, 0)
the goal is to minimize \phi



Input Format:

the real number x, the integer n and the interger m
the integer array a, with n elements

then follows n lines with the following format:
for the ith line, the distribution p_{i, j} of length m

then another n lines with the format:
for the ith line, the values of d_i of length m


Interaction Format:

n real numbers, the values of remainCharge 


Output Format:

let s_{i, j} be the kW for the ith station at the jth minute. 
output n lines, with m numbers on each line.

the following constraints for s must hold.
for all values j 
	\sum_{i = 0}^{n} (s_{i, j}) <= x



Constraints:

1 <= x <= 1000
1 <= n <= 1e4
1 <= m <= 5
1 <= a_i <= 100
1 <= d_{i, j} <= a_i
\sum_{j = 0}^{m} (p_{i, j}) = 1



Time Limit: 5sec
Memory Limit: 512 mb


